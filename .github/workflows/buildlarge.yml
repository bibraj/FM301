name: Build compact executables (Nuitka + UPX)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # ---------------- Linux ----------------
      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential pkg-config python3-dev upx-ucl

      - name: Install Python deps (Linux)
        if: runner.os == 'Linux'
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install nuitka netCDF4 numpy reportlab certifi requests cftime
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          ENTRY=validate_netcdf_total.py
          OUTDIR=dist
          rm -rf "$OUTDIR" build || true
          mkdir -p "$OUTDIR"
          INCLUDE_JSON="--include-data-file=cf_radial_metadata_Final.json=cf_radial_metadata_Final.json"
          python -m nuitka --remove-output --show-modules --follow-imports \
            --output-dir="$OUTDIR" $INCLUDE_JSON \
            --include-module=netCDF4._netCDF4 \
            --include-package=netCDF4 \
            --include-package=numpy \
            --include-package=reportlab \
            --include-package=cftime \
            "$ENTRY"
          ls -lah "$OUTDIR"

      - name: Smoke test binary (Linux)
        if: runner.os == 'Linux'
        run: |
          BIN=$(ls dist | head -n1)
          echo "Running smoke test: $BIN --help"
          ./dist/$BIN --help || echo "Binary did not print help"

      - name: Functional test binary (Linux)
        if: runner.os == 'Linux'
        run: |
          BIN=$(ls dist | head -n1)
          TEST_INPUT="test/ODIM_sample.nc"
          TEST_OUTPUT="test_output.pdf"
          echo "Running functional test: ./dist/$BIN $TEST_INPUT $TEST_OUTPUT"
          ./dist/$BIN "$TEST_INPUT" "$TEST_OUTPUT"
          if [ -f "$TEST_OUTPUT" ]; then
            echo "Functional test passed: $TEST_OUTPUT created"
          else
            echo "Functional test failed: output not created"
            exit 1
          fi

      # ---------------- Windows ----------------
      - name: Install build tools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install upx -y

      - name: Pre-install depends.exe (Windows)
        if: runner.os == 'Windows'
        run: |
          $url = "https://dependencywalker.com/depends22_x64.zip"
          $zip = "$env:TEMP\depends.zip"
          $dest = "$env:LOCALAPPDATA\Nuitka\Nuitka\Cache\downloads\depends\x86_64"
          New-Item -ItemType Directory -Force -Path $dest | Out-Null
          Invoke-WebRequest -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $dest -Force

      - name: Install Python deps (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip setuptools wheel
          pip install nuitka netCDF4 numpy reportlab certifi requests cftime
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          $ENTRY="validate_netcdf_total.py"
          $OUTDIR="dist"
          if (Test-Path $OUTDIR) { Remove-Item $OUTDIR -Recurse -Force }
          New-Item -ItemType Directory -Path $OUTDIR | Out-Null
          $INCLUDE_JSON="--include-data-file=cf_radial_metadata_Final.json=cf_radial_metadata_Final.json"
          python -m nuitka --remove-output --show-modules --follow-imports `
            --output-dir=$OUTDIR $INCLUDE_JSON `
            --include-module=netCDF4._netCDF4 `
            --include-package=netCDF4 `
            --include-package=numpy `
            --include-package=reportlab `
            --include-package=cftime `
            $ENTRY
          Get-ChildItem $OUTDIR

      - name: Smoke test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          $BIN = Get-ChildItem dist | Select-Object -First 1
          Write-Output "Running smoke test: $($BIN.Name) --help"
          & "dist\$($BIN.Name)" --help

      - name: Functional test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          $BIN = Get-ChildItem dist | Select-Object -First 1
          $TEST_INPUT = "test\ODIM_sample.nc"
          $TEST_OUTPUT = "test_output.pdf"
          Write-Output "Running functional test: dist\$($BIN.Name) $TEST_INPUT $TEST_OUTPUT"
          & "dist\$($BIN.Name)" $TEST_INPUT $TEST_OUTPUT
          if (Test-Path $TEST_OUTPUT) {
            Write-Output "Functional test passed: $TEST_OUTPUT created"
          } else {
            Write-Error "Functional test failed: output not created"
            exit 1
          }

      # ---------------- UPX compress (both OS) ----------------
      - name: Compress binary with UPX
        run: |
          if [ -d dist ]; then
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              BIN=$(ls dist | head -n1)
              echo "Compressing $BIN"
              upx --best "dist/$BIN" || echo "UPX failed"
            elif [[ "$RUNNER_OS" == "Windows" ]]; then
              $BIN = Get-ChildItem dist | Select-Object -First 1
              Write-Output "Compressing $($BIN.Name)"
              & upx --best "dist\$($BIN.Name)" || Write-Output "UPX failed"
            fi
            ls -lh dist/
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: dist/*
