name: Build compact executables (Nuitka + UPX)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10']

    steps:
      # --------------------
      # Checkout code
      # --------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # --------------------
      # Setup Python
      # --------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # --------------------
      # Install system build tools
      # --------------------
      - name: Install system build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential pkg-config python3-dev upx-ucl
        shell: bash

      - name: Install system build tools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install upx -y
        shell: pwsh

      # --------------------
      # Pre-install depends.exe for Windows (avoid interactive prompt)
      # --------------------
      - name: Pre-install depends.exe for Nuitka (Windows only)
        if: runner.os == 'Windows'
        run: |
          $url = "https://dependencywalker.com/depends22_x64.zip"
          $zip = "$env:TEMP\depends.zip"
          $dest = "$env:LOCALAPPDATA\Nuitka\Nuitka\Cache\downloads\depends\x86_64"
          Invoke-WebRequest -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $dest -Force
          Write-Host "depends.exe installed to $dest"
        shell: pwsh

      # --------------------
      # Install Python dependencies
      # --------------------
      - name: Install Python build deps (Linux)
        if: runner.os == 'Linux'
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install nuitka
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt || true; fi
        shell: bash

      - name: Install Python build deps (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install nuitka
          if (Test-Path -Path ./requirements.txt) { pip install -r requirements.txt }
        shell: pwsh

      # --------------------
      # Build with Nuitka
      # --------------------
      - name: Build with Nuitka
        run: |
          ENTRY=validate_netcdf_total.py
          OUTDIR=dist
          rm -rf "$OUTDIR" build || true
          mkdir -p "$OUTDIR"

          # Include JSON data file in binary
          INCLUDE_JSON="--include-data-file=cf_radial_metadata_Final.json=cf_radial_metadata_Final.json"

          python -m nuitka --onefile --lto=yes --remove-output --output-dir="$OUTDIR" $INCLUDE_JSON "$ENTRY"

          ls -lah "$OUTDIR" || true
        shell: bash
        env:
          NUITKA_DOWNLOADS: "1"

      # --------------------
      # Compress binary with UPX
      # --------------------
      - name: Compress produced binary with UPX
        run: |
          if [ -d dist ]; then
            BIN=$(ls dist | head -n1)
            echo "Compressing: $BIN"
            if command -v upx >/dev/null 2>&1; then
              upx --best --ultra-brute "dist/$BIN" || echo "UPX failed or unsupported"
            fi
            ls -lh dist/
          fi
        shell: bash

      # --------------------
      # Upload build artifact
      # --------------------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: dist/*
